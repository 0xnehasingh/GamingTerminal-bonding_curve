import { Connection, PublicKey } from '@solana/web3.js'
import { SMART_CONTRACT_ADDRESS, RPC_ENDPOINTS } from './solana-config'

interface PoolIntegrationTest {
  testName: string
  success: boolean
  data?: any
  error?: string
  duration: number
}

export class PoolIntegrationTester {
  private connection: Connection
  private results: PoolIntegrationTest[] = []

  constructor(endpointIndex = 0) {
    this.connection = new Connection(RPC_ENDPOINTS[endpointIndex], 'confirmed')
  }

  async runAllTests(): Promise<PoolIntegrationTest[]> {
    console.log('üß™ Starting Pool Integration Tests...')
    console.log('üìç Contract Address:', SMART_CONTRACT_ADDRESS.toString())
    console.log('üåê RPC Endpoint:', this.connection.rpcEndpoint)
    console.log('')

    this.results = []

    // Run all tests
    await this.testContractAccessibility()
    await this.testPoolAccountDiscovery()
    await this.testPoolDataStructure()
    await this.testTokenMetadata()
    await this.testVaultBalances()
    await this.testPoolCreationFlow()

    return this.results
  }

  private async testContractAccessibility(): Promise<void> {
    const startTime = Date.now()

    try {
      console.log('üîç Test 1: Contract Accessibility')

      const accountInfo = await this.connection.getAccountInfo(SMART_CONTRACT_ADDRESS)

      if (!accountInfo) {
        throw new Error('Contract not found')
      }

      if (!accountInfo.executable) {
        throw new Error('Account exists but is not executable')
      }

      const result: PoolIntegrationTest = {
        testName: 'Contract Accessibility',
        success: true,
        data: {
          executable: accountInfo.executable,
          owner: accountInfo.owner.toString(),
          lamports: accountInfo.lamports,
          dataLength: accountInfo.data.length
        },
        duration: Date.now() - startTime
      }

      console.log('‚úÖ Contract is accessible and executable')
      console.log('   - Owner:', accountInfo.owner.toString())
      console.log('   - Data length:', accountInfo.data.length, 'bytes')
      console.log('   - Lamports:', accountInfo.lamports)
      console.log('')

      this.results.push(result)

    } catch (error) {
      const result: PoolIntegrationTest = {
        testName: 'Contract Accessibility',
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        duration: Date.now() - startTime
      }

      console.log('‚ùå Contract accessibility test failed:', result.error)
      console.log('')

      this.results.push(result)
    }
  }

  private async testPoolAccountDiscovery(): Promise<void> {
    const startTime = Date.now()

    try {
      console.log('üîç Test 2: Pool Account Discovery')

      // Test different account sizes that might be pools
      const accountSizes = [80, 394, 200, 300, 400]
      const allAccounts: any[] = []

      for (const size of accountSizes) {
        try {
          const accounts = await this.connection.getProgramAccounts(SMART_CONTRACT_ADDRESS, {
            commitment: 'confirmed',
            filters: [{ dataSize: size }]
          })

          if (accounts.length > 0) {
            console.log(`   üìä Found ${accounts.length} accounts with size ${size} bytes`)
            allAccounts.push(...accounts)
          }
        } catch (error) {
          console.log(`   ‚ö†Ô∏è Error fetching ${size}-byte accounts:`, error instanceof Error ? error.message : 'Unknown error')
        }
      }

      const result: PoolIntegrationTest = {
        testName: 'Pool Account Discovery',
        success: allAccounts.length > 0,
        data: {
          totalAccounts: allAccounts.length,
          accountSizes: [...new Set(allAccounts.map(acc => acc.account.data.length))].sort((a, b) => a - b)
        },
        duration: Date.now() - startTime
      }

      if (allAccounts.length > 0) {
        console.log('‚úÖ Found pool accounts')
        console.log('   - Total accounts:', allAccounts.length)
        console.log('   - Account sizes:', result.data.accountSizes)
      } else {
        console.log('‚ö†Ô∏è No pool accounts found')
        console.log('   - This is normal if no pools have been created yet')
      }
      console.log('')

      this.results.push(result)

    } catch (error) {
      const result: PoolIntegrationTest = {
        testName: 'Pool Account Discovery',
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        duration: Date.now() - startTime
      }

      console.log('‚ùå Pool account discovery test failed:', result.error)
      console.log('')

      this.results.push(result)
    }
  }

  private async testPoolDataStructure(): Promise<void> {
    const startTime = Date.now()

    try {
      console.log('üîç Test 3: Pool Data Structure Analysis')

      // Get accounts with common pool sizes
      const poolAccounts = await this.connection.getProgramAccounts(SMART_CONTRACT_ADDRESS, {
        commitment: 'confirmed',
        filters: [
          { dataSize: 80 },  // Standard pool size
          { dataSize: 394 }  // Extended pool size
        ]
      })

      if (poolAccounts.length === 0) {
        console.log('‚ÑπÔ∏è No pool accounts found for structure analysis')
        console.log('   - This is normal if no pools have been created yet')
        
        const result: PoolIntegrationTest = {
          testName: 'Pool Data Structure Analysis',
          success: true,
          data: {
            totalPools: 0,
            message: 'No pools to analyze - this is expected for a new contract'
          },
          duration: Date.now() - startTime
        }

        console.log('‚úÖ Pool structure analysis complete (no pools to analyze)')
        console.log('')

        this.results.push(result)
        return
      }

      const poolData: any[] = []

      for (const account of poolAccounts.slice(0, 3)) { // Test first 3 pools
        const accountData = account.account.data
        const poolAddress = account.pubkey.toString()

        console.log(`   üìù Analyzing pool: ${poolAddress}`)
        console.log(`   üìä Data length: ${accountData.length} bytes`)

        // Extract token mints for 394-byte pool accounts
        if (accountData.length === 394) {
          const tokenMintBytes = accountData.slice(16, 48)  // meme_reserve.mint
          const quoteMintBytes = accountData.slice(88, 120) // quote_reserve.mint

          try {
            const tokenMint = new PublicKey(tokenMintBytes)
            const quoteMint = new PublicKey(quoteMintBytes)

            const poolInfo = {
              poolAddress,
              accountSize: accountData.length,
              tokenMint: tokenMint.toString(),
              quoteMint: quoteMint.toString(),
              hasValidMints: true
            }

            poolData.push(poolInfo)

            console.log(`   ü™ô Token Mint: ${tokenMint.toString()}`)
            console.log(`   üí∞ Quote Mint: ${quoteMint.toString()}`)

          } catch (error) {
            console.log(`   ‚ùå Invalid mint addresses: ${error instanceof Error ? error.message : 'Unknown error'}`)
            poolData.push({
              poolAddress,
              accountSize: accountData.length,
              tokenMint: 'Invalid',
              quoteMint: 'Invalid',
              hasValidMints: false
            })
          }
        } else {
          console.log(`   ‚ö†Ô∏è Not a pool account: ${accountData.length} bytes (expected 394)`)
        }

        console.log('')
      }

      const result: PoolIntegrationTest = {
        testName: 'Pool Data Structure Analysis',
        success: poolData.some(pool => pool.hasValidMints),
        data: {
          totalPools: poolData.length,
          validPools: poolData.filter(pool => pool.hasValidMints).length,
          poolData
        },
        duration: Date.now() - startTime
      }

      console.log('‚úÖ Pool structure analysis complete')
      console.log(`   - Valid pools: ${result.data.validPools}/${result.data.totalPools}`)
      console.log('')

      this.results.push(result)

    } catch (error) {
      const result: PoolIntegrationTest = {
        testName: 'Pool Data Structure Analysis',
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        duration: Date.now() - startTime
      }

      console.log('‚ùå Pool structure test failed:', result.error)
      console.log('')

      this.results.push(result)
    }
  }

  private async testTokenMetadata(): Promise<void> {
    const startTime = Date.now()

    try {
      console.log('üîç Test 4: Token Metadata Fetching')

      // Get a sample pool to test token metadata
      const poolAccounts = await this.connection.getProgramAccounts(SMART_CONTRACT_ADDRESS, {
        commitment: 'confirmed',
        filters: [{ dataSize: 394 }]
      })

      if (poolAccounts.length === 0) {
        console.log('‚ÑπÔ∏è No pools available for metadata testing')
        
        const result: PoolIntegrationTest = {
          testName: 'Token Metadata Fetching',
          success: true,
          data: {
            message: 'No pools to test metadata - this is expected for a new contract'
          },
          duration: Date.now() - startTime
        }

        console.log('‚úÖ Token metadata test complete (no pools to test)')
        console.log('')

        this.results.push(result)
        return
      }

      const samplePool = poolAccounts[0]
      const accountData = samplePool.account.data

      if (accountData.length < 72) {
        throw new Error('Sample pool data too small')
      }

      const tokenMintBytes = accountData.slice(8, 40)
      const tokenMint = new PublicKey(tokenMintBytes)

      console.log(`   ü™ô Testing token: ${tokenMint.toString()}`)

      // Get token account info
      const tokenInfo = await this.connection.getParsedAccountInfo(tokenMint)

      if (!tokenInfo.value?.data || !('parsed' in tokenInfo.value.data)) {
        throw new Error('Token account not found or not parseable')
      }

      const parsed = tokenInfo.value.data.parsed

      console.log(`   üìä Token Info:`)
      console.log(`      - Supply: ${parsed.info.supply}`)
      console.log(`      - Decimals: ${parsed.info.decimals}`)
      console.log(`      - Mint Authority: ${parsed.info.mintAuthority || 'None'}`)
      console.log(`      - Freeze Authority: ${parsed.info.freezeAuthority || 'None'}`)

      const result: PoolIntegrationTest = {
        testName: 'Token Metadata Fetching',
        success: true,
        data: {
          tokenMint: tokenMint.toString(),
          supply: parsed.info.supply,
          decimals: parsed.info.decimals,
          mintAuthority: parsed.info.mintAuthority,
          freezeAuthority: parsed.info.freezeAuthority
        },
        duration: Date.now() - startTime
      }

      console.log('‚úÖ Token metadata test complete')
      console.log('')

      this.results.push(result)

    } catch (error) {
      const result: PoolIntegrationTest = {
        testName: 'Token Metadata Fetching',
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        duration: Date.now() - startTime
      }

      console.log('‚ùå Token metadata test failed:', result.error)
      console.log('')

      this.results.push(result)
    }
  }

  private async testVaultBalances(): Promise<void> {
    const startTime = Date.now()

    try {
      console.log('üîç Test 5: Vault Balance Fetching')

      // Get a sample pool
      const poolAccounts = await this.connection.getProgramAccounts(SMART_CONTRACT_ADDRESS, {
        commitment: 'confirmed',
        filters: [{ dataSize: 80 }]
      })

      if (poolAccounts.length === 0) {
        console.log('‚ÑπÔ∏è No pools available for vault testing')
        
        const result: PoolIntegrationTest = {
          testName: 'Vault Balance Fetching',
          success: true,
          data: {
            message: 'No pools to test vaults - this is expected for a new contract'
          },
          duration: Date.now() - startTime
        }

        console.log('‚úÖ Vault balance test complete (no pools to test)')
        console.log('')

        this.results.push(result)
        return
      }

      const samplePool = poolAccounts[0]
      const accountData = samplePool.account.data

      if (accountData.length < 72) {
        throw new Error('Sample pool data too small')
      }

      const tokenMintBytes = accountData.slice(8, 40)
      const quoteMintBytes = accountData.slice(40, 72)

      const tokenMint = new PublicKey(tokenMintBytes)
      const quoteMint = new PublicKey(quoteMintBytes)

      console.log(`   ü™ô Token: ${tokenMint.toString()}`)
      console.log(`   üí∞ Quote: ${quoteMint.toString()}`)

      // Derive pool signer PDA
      const [poolSigner] = PublicKey.findProgramAddressSync(
        [Buffer.from('signer'), samplePool.pubkey.toBuffer()],
        SMART_CONTRACT_ADDRESS
      )

      console.log(`   üîë Pool Signer: ${poolSigner.toString()}`)

      // Calculate vault addresses
      const { getAssociatedTokenAddressSync } = await import('@solana/spl-token')
      const memeVault = getAssociatedTokenAddressSync(tokenMint, poolSigner, true)
      const quoteVault = getAssociatedTokenAddressSync(quoteMint, poolSigner, true)

      console.log(`   üè¶ Meme Vault: ${memeVault.toString()}`)
      console.log(`   üè¶ Quote Vault: ${quoteVault.toString()}`)

      // Check vault balances
      let memeBalance = 0
      let quoteBalance = 0

      try {
        const memeVaultInfo = await this.connection.getParsedAccountInfo(memeVault)
        if (memeVaultInfo.value?.data && 'parsed' in memeVaultInfo.value.data) {
          memeBalance = memeVaultInfo.value.data.parsed.info.tokenAmount.uiAmount || 0
          console.log(`   ü™ô Meme Token Balance: ${memeBalance}`)
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è Could not fetch meme vault balance: ${error instanceof Error ? error.message : 'Unknown error'}`)
      }

      try {
        const quoteVaultInfo = await this.connection.getParsedAccountInfo(quoteVault)
        if (quoteVaultInfo.value?.data && 'parsed' in quoteVaultInfo.value.data) {
          quoteBalance = quoteVaultInfo.value.data.parsed.info.tokenAmount.uiAmount || 0
          console.log(`   üí∞ Quote Token Balance: ${quoteBalance}`)
        }
      } catch (error) {
        console.log(`   ‚ö†Ô∏è Could not fetch quote vault balance: ${error instanceof Error ? error.message : 'Unknown error'}`)
      }

      const result: PoolIntegrationTest = {
        testName: 'Vault Balance Fetching',
        success: true,
        data: {
          poolSigner: poolSigner.toString(),
          memeVault: memeVault.toString(),
          quoteVault: quoteVault.toString(),
          memeBalance,
          quoteBalance
        },
        duration: Date.now() - startTime
      }

      console.log('‚úÖ Vault balance test complete')
      console.log('')

      this.results.push(result)

    } catch (error) {
      const result: PoolIntegrationTest = {
        testName: 'Vault Balance Fetching',
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        duration: Date.now() - startTime
      }

      console.log('‚ùå Vault balance test failed:', result.error)
      console.log('')

      this.results.push(result)
    }
  }

  private async testPoolCreationFlow(): Promise<void> {
    const startTime = Date.now()

    try {
      console.log('üîç Test 6: Pool Creation Flow Analysis')

      // This test analyzes the pool creation flow without actually creating pools
      console.log('   üìã Pool Creation Flow Analysis:')
      console.log('   1. ‚úÖ Create token mint (SPL Token)')
      console.log('   2. ‚úÖ Initialize target configuration')
      console.log('   3. ‚úÖ Create vault accounts')
      console.log('   4. ‚úÖ Transfer mint authority to pool signer')
      console.log('   5. ‚úÖ Call new_pool instruction')
      console.log('   6. ‚úÖ Store pool data in local context')
      console.log('   7. ‚úÖ Display in Featured Tokens Grid')
      console.log('')
      console.log('   üîÑ Data Flow:')
      console.log('   - Create Pool ‚Üí Local Context ‚Üí Combined Hook ‚Üí Featured Grid')
      console.log('   - Smart Contract ‚Üí On-chain Data ‚Üí Combined Hook ‚Üí Featured Grid')
      console.log('')

      const result: PoolIntegrationTest = {
        testName: 'Pool Creation Flow Analysis',
        success: true,
        data: {
          flowSteps: [
            'Create token mint',
            'Initialize target configuration', 
            'Create vault accounts',
            'Transfer mint authority',
            'Call new_pool instruction',
            'Store in local context',
            'Display in Featured Grid'
          ],
          dataFlow: [
            'Create Pool ‚Üí Local Context ‚Üí Combined Hook ‚Üí Featured Grid',
            'Smart Contract ‚Üí On-chain Data ‚Üí Combined Hook ‚Üí Featured Grid'
          ]
        },
        duration: Date.now() - startTime
      }

      console.log('‚úÖ Pool creation flow analysis complete')
      console.log('')

      this.results.push(result)

    } catch (error) {
      const result: PoolIntegrationTest = {
        testName: 'Pool Creation Flow Analysis',
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
        duration: Date.now() - startTime
      }

      console.log('‚ùå Pool creation flow test failed:', result.error)
      console.log('')

      this.results.push(result)
    }
  }

  printSummary(): void {
    console.log('üìä Pool Integration Test Summary')
    console.log('=' * 50)

    const totalTests = this.results.length
    const passedTests = this.results.filter(r => r.success).length
    const failedTests = totalTests - passedTests
    const totalDuration = this.results.reduce((sum, r) => sum + r.duration, 0)

    console.log(`Total Tests: ${totalTests}`)
    console.log(`Passed: ${passedTests}`)
    console.log(`Failed: ${failedTests}`)
    console.log(`Total Duration: ${totalDuration}ms`)
    console.log('')

    this.results.forEach((result, index) => {
      const status = result.success ? '‚úÖ' : '‚ùå'
      console.log(`${index + 1}. ${status} ${result.testName} (${result.duration}ms)`)

      if (!result.success && result.error) {
        console.log(`   Error: ${result.error}`)
      }
    })

    console.log('')
    console.log(`Overall Status: ${passedTests === totalTests ? '‚úÖ ALL TESTS PASSED' : '‚ùå SOME TESTS FAILED'}`)
    
    if (passedTests === totalTests) {
      console.log('üéâ Pool integration is working correctly!')
      console.log('üí° Newly created pools should appear in the Featured Tokens Grid.')
    } else {
      console.log('‚ö†Ô∏è Some integration issues detected.')
      console.log('üí° Check the errors above for details.')
    }
  }
}

export async function runPoolIntegrationTests(endpointIndex = 0): Promise<PoolIntegrationTest[]> {
  const tester = new PoolIntegrationTester(endpointIndex)
  const results = await tester.runAllTests()
  tester.printSummary()
  return results
} 